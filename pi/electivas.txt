Electivas hechas:

Recordarme (1 pt)
Creamos la cookie en el mainController. Si rememberMe es true entonces ejecutamos el metodo cookie sobre el objeto response y le pasamos 3 parametros que son primero, el nombre de la cookie, en este caso, "userId", en segundo lugar le pasamos el valor de la cookie que es el id del usuario que lo obtuvimos de hacer un findOne con criterio where donde el mail que envia el usuario es el mismo que el mail del modelo, por ultimo se estableció la duración de la cookie utilizando maxAge. Por otro lado, en el app.js verificamos si existía la cookie "userId" y si no había un usuario en sesión con req.session.user. De existir la cookie y no haber un usuario en sesión se busca en la base de datos el usuario que tenga id igual al id guardado en la cookie. Si se encuentra el usuario se establece la sesión y se actualiza el locals. Si hay algún error se envía.


Imagen de perfil (0,5 pt)
Le pedimos al usuario que al registrarse enviara una foto obligatoriamente controlandolo tanto en el frontend (con un required en el input y mostrando un mensaje por pantalla) como en el backend (con un if que controle si el campo de la foto de perfil está vacío y de estarlo, agregar una propiedad message a errors y guardarla en locals para luego poder acceder a ella en la vista y así mostrar el mensaje de error mencionado anteriormente). Para mostrar la imagen accedimos a la propiedad fotoPerfil del usuario ya sea al requerir
este modelo o utilizando las relaciones correspondientes para acceder a esta propiedad.


Validaciones interactivas (0,5 pt)
Hicimos las validaciones en el backend como explicado en la electiva "Imagen de perfil" haciendo un condicional de tipo if, if else para controlar si los campos están vacíos y de estarlo, agregar la propiedad message al objeto literal errors que pertenece al objeto literal locals que es accesible desde la vista para poder mostrar allí el mensaje de error. En la vista se hizo un if preguntando si locals.errors contiene un mensaje y de hacerlo mostrarlo dentro del formulario para especificar el error. 


Editar datos del usuario (1 pt)
Para editar los datos del usuario comenzamos por crear dos rutas, una por get para mostrar el formulario y una por post para que procese los datos y con un update que se actualizaran en la base de datos. Luego en la vista de miPerfil hicimos un condicional if donde preguntamos si estaba logueado el usuario. De estarlo, aparecería un símbolo de un lápiz que al tocarlo tiene una etiqueta a que lleva a la vista donde está el formulario para editar el perfil. Para esta vista desde el controller en el metodo que se usa para la ruta por GET la renderizamos enviando también los resultados de un findByPk del usuario para poder poner como value en los inputs los datos que tiene el usuario hasta el momento y que si los quiere cambiar los borre. Por otro lado, en el método de la ruta por POST primero hacemos un req.body para capturar los values de los inputs del formulario y chequeamos que ninguno esté vacío. Si está vacío alguno se redirige al usuario a esta misma vista y de no haber ninguno vacío se usa un update con parámetros info para mandar la información del formulario y criterio id:id (el primer id correspodiente a cómo se llama esta propiedad en la base de datos y el segundo id definido previamente como req.params.id) para que sepa a qué usuario debe actualizarle los datos. Una vez que se actualizan los datos se van a poder ver en toda la página donde sean usados por ejemplo en el "Welcome [nombre]!" luego de apagar nodemon y prenderlo nuevamente ya que se está modificando la base de datos de mysql.